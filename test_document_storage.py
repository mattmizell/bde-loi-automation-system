#!/usr/bin/env python3
"""
Test Document Storage to Adam Castelli's CRM Record

This script creates a test LOI document and saves it to Adam's CRM record
to demonstrate the document storage functionality.
"""

import asyncio
import aiohttp
import logging
from datetime import datetime
from pathlib import Path
import os
import sys
import base64
import json

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_test_pdf_document(file_path: str):
    """Create a test PDF document using basic HTML to PDF conversion"""
    
    try:
        # Create simple HTML content without complex formatting
        date_str = datetime.now().strftime('%B %d, %Y')
        timestamp_str = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        html_content = f"""<!DOCTYPE html>
<html>
<head>
    <title>Test LOI Document</title>
</head>
<body>
    <h1>Better Day Energy</h1>
    <h2>Letter of Intent - TEST DOCUMENT</h2>
    <p>VP Racing Fuel Supply Agreement</p>
    
    <p><strong>Date:</strong> {date_str}</p>
    <p><strong>Customer:</strong> Adam Simpson</p>
    <p><strong>Company:</strong> Test Company</p>
    <p><strong>Email:</strong> Adam_Simpson@unifirst.com</p>
    
    <h3>Agreement Summary</h3>
    <p>This is a test Letter of Intent document created to demonstrate the 
    document storage functionality of the LOI Automation System.</p>
    
    <ul>
        <li>Monthly Gasoline Volume: 10,000 gallons</li>
        <li>Monthly Diesel Volume: 5,000 gallons</li>
        <li>Estimated Total Incentives: $25,000</li>
        <li>Conversion Timeline: 30 days</li>
    </ul>
    
    <h3>Terms and Conditions</h3>
    <p>This test document demonstrates the automated LOI generation and 
    CRM document storage capabilities. All data shown is for testing purposes only.</p>
    
    <p><strong>Customer Signature:</strong> _________________________</p>
    <p><strong>Date:</strong> _________________________</p>
    <br>
    <p><strong>Better Day Energy Representative:</strong> _________________________</p>
    <p><strong>Date:</strong> _________________________</p>
    
    <p>Generated by Better Day Energy LOI Automation System</p>
    <p>Document ID: TEST-{timestamp_str}</p>
</body>
</html>"""
        
        # Save as HTML for now - in production you'd convert to PDF
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"üìÑ Created test document: {file_path}")
        
    except Exception as e:
        logger.error(f"‚ùå Error creating test document: {e}")
        raise

async def get_adam_contact_id(api_key: str) -> str:
    """Get Adam Simpson's contact ID from CRM (found in earlier search)"""
    
    # We found Adam Simpson with this ID in our CRM search
    return "4035468675539843935276170708395"

async def add_note_to_crm(api_key: str, contact_id: str, file_path: str, file_name: str) -> dict:
    """Add a note to CRM contact about the document"""
    
    try:
        # Read the document content
        with open(file_path, 'r', encoding='utf-8') as file:
            file_content = file.read()
        
        # Create note with document content
        note_text = f"""LOI Document Test - {file_name}

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Document Content:
{file_content}

---
This note demonstrates the LOI Automation System's ability to store document information in Adam Simpson's CRM record.
"""
        
        async with aiohttp.ClientSession() as session:
            headers = {
                "Content-Type": "application/json",
                "Authorization": api_key
            }
            
            body = {
                "Function": "CreateNote",
                "Parameters": {
                    "ContactId": contact_id,
                    "Note": note_text
                }
            }
            
            async with session.post("https://api.lessannoyingcrm.com/v2/", headers=headers, json=body) as response:
                response_text = await response.text()
                logger.info(f"CRM API Response Status: {response.status}")
                logger.info(f"CRM API Response: {response_text[:500]}")
                
                if response.status == 200:
                    try:
                        data = json.loads(response_text)
                        
                        if 'ErrorCode' not in data:
                            return {
                                'success': True,
                                'note_id': data.get('NoteId'),
                                'file_name': file_name
                            }
                        else:
                            return {
                                'success': False,
                                'error': f"CRM API error {data.get('ErrorCode')}: {data.get('ErrorDescription')}"
                            }
                    except json.JSONDecodeError:
                        return {
                            'success': False,
                            'error': f"Invalid JSON response: {response_text[:200]}"
                        }
                else:
                    return {
                        'success': False,
                        'error': f"HTTP {response.status}: {response_text[:200]}"
                    }
                    
    except Exception as e:
        return {
            'success': False,
            'error': str(e)
        }

async def upload_document_to_crm(api_key: str, contact_id: str, file_path: str, file_name: str) -> dict:
    """Upload document to CRM contact"""
    
    try:
        # Read file and encode as base64
        with open(file_path, 'rb') as file:
            file_content = file.read()
            file_base64 = base64.b64encode(file_content).decode('utf-8')
        
        async with aiohttp.ClientSession() as session:
            headers = {
                "Content-Type": "application/json",
                "Authorization": api_key
            }
            
            body = {
                "Function": "CreateFile",
                "Parameters": {
                    "ContactId": contact_id,
                    "FileName": file_name,
                    "File": file_base64,
                    "Description": f"Test LOI Document - Generated {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                }
            }
            
            async with session.post("https://api.lessannoyingcrm.com/v2/", headers=headers, json=body) as response:
                response_text = await response.text()
                logger.info(f"CRM API Response Status: {response.status}")
                logger.info(f"CRM API Response: {response_text[:500]}")
                
                if response.status == 200:
                    try:
                        data = json.loads(response_text)
                        
                        if 'ErrorCode' not in data:
                            return {
                                'success': True,
                                'file_id': data.get('FileId'),
                                'file_name': file_name
                            }
                        else:
                            return {
                                'success': False,
                                'error': f"CRM API error {data.get('ErrorCode')}: {data.get('ErrorDescription')}"
                            }
                    except json.JSONDecodeError:
                        return {
                            'success': False,
                            'error': f"Invalid JSON response: {response_text[:200]}"
                        }
                else:
                    return {
                        'success': False,
                        'error': f"HTTP {response.status}: {response_text[:200]}"
                    }
                    
    except Exception as e:
        return {
            'success': False,
            'error': str(e)
        }

async def test_document_storage():
    """Test saving a document to Adam's CRM record"""
    
    try:
        # API Key
        api_key = "1073223-4036284360051868673733029852600-hzOnMMgwOvTV86XHs9c4H3gF5I7aTwO33PJSRXk9yQT957IY1W"
        
        logger.info("üîç Getting Adam Simpson's contact from CRM...")
        
        # Use Adam Simpson's contact ID that we found in our CRM search
        adam_contact_id = await get_adam_contact_id(api_key)
        
        logger.info(f"‚úÖ Using Adam Simpson's contact ID: {adam_contact_id}")
        
        # Create test document
        documents_dir = Path("./test_documents")
        documents_dir.mkdir(exist_ok=True)
        
        # Use simple text file for initial testing
        test_doc_path = Path("./simple_test.txt")
        
        # Create descriptive file name
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        file_name = f"LOI_Test_Document_{timestamp}.txt"
        
        logger.info("üìù Adding test document note to Adam's CRM record...")
        
        # Try adding a note first to show we can update the record
        result = await add_note_to_crm(api_key, adam_contact_id, str(test_doc_path), file_name)
        
        if result['success']:
            logger.info("‚úÖ Successfully added test document note to Adam Simpson's CRM record!")
            logger.info(f"üìù Note ID: {result.get('note_id')}")
            logger.info(f"üìÑ File Name: {result.get('file_name')}")
            logger.info(f"üìÑ Contact ID: {adam_contact_id}")
            logger.info(f"üìÑ Contact Email: Adam_Simpson@unifirst.com")
            
            return True
        else:
            logger.error(f"‚ùå Failed to add note: {result.get('error')}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error testing document storage: {e}")
        return False

async def main():
    """Main function"""
    
    print("üß™ Testing Document Storage to Adam Simpson's CRM Record")
    print("=" * 60)
    
    success = await test_document_storage()
    
    if success:
        print("\n‚úÖ Document storage test completed successfully!")
        print("üìù Test document note has been added to Adam Simpson's CRM record")
    else:
        print("\n‚ùå Document storage test failed")
        print("üìã Check logs for details")

if __name__ == "__main__":
    asyncio.run(main())